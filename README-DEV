1. TODO when upgrading upstream

- Update libpng/libpng.vers if the one generated by the upstream build has
  changed.

2. The upstream build

2.1. Generated files

Upstream file generation is relatively complicated so hopefully this summary
will save time in future.

Note that we do not generate any files in our build.

- config.h: For the most part this is a standard autoconf/autoheader config.h,
            except for a few libpng-specific macros: PNG_ARM_NEON_*,
            PNG_INTEL_SSE_OPT, PNG_MIPS_MSA_*, PNG_POWERPC_VSX_*. The only one
            of those used in our case is PNG_INTEL_SSE_OPT which we define in
            c.poptions instead. None of the other macros in config.h are
            referenced anywhere.

            (config.h is only included by pnglibconf.c (which is used only in
            the generation of pnglibconf.h) and pngpriv.h which is only
            included by the library's .c files.)

- pnglibconf.h: PNG library features. Generated from pnglibconf.dfa (which
                contains the configuration option documentation) using
                options.awk. The main purpose of the dynamism is to enforce
                the dependencies between the PNG library features. Given that
                we don't change any library-level features we simply symlink
                scripts/pnglibconf.h.prebuilt to pnglibconf.h.

- libpng.vers: LD versioning script. Generated from scripts/vers.c (which
               includes png.h) using scripts/dfn.awk. We use a static copy
               taken from the upstream build.

- libpng.sym: Symbol export list for libtool. Generated from scripts/sym.c
              (which includes png.h) using scripts/dfn.awk. Only used if
              libraries cannot be versioned (autodetected by configure).

- pngprefix.h: If a prefix has been configured for exported symbols, this
               header maps from the public libpng function names to the
               prefixed symbol names, otherwise it is empty. We do not support
               the prefixing feature.

- symbols.chk: This file is produced by checksym.awk as part of the `check`
               target (from intermediate files symbols.c and symbols.out). In
               the process checksym.awk checks that the set of functions
               exported from png.h matches those in symbols.def, which is
               manually updated whenever functions are added to png.h.

2.2. Hardware optimizations (SSE, for example)

(Note that this is a slightly simplified explanation.)

If the detected CPU supports hardware optimizations then the sources in
<arch>/ are added to the build (unless the user explicitly disabled hardware
optimizations using --enable-hardware-optimizations=no or
--enable-{arm-neon,mips-msa,intel-sse,powerpc-vsx}=no).

If the user explicitly enabled hardware optimizations using
--enable-hardware-optimizations or
--enable-{arm-neon,mips-msa,intel-sse,powerpc-vsx} then hardware optimization
is enabled and pngpriv.h checks the appropriate compiler macros such as
__ARM_NEON__, __SSE2__, __mips_msa, __PPC64__, etc. and sets the value of
PNG_*_IMPLEMENTATION such that the corresponding parts of the sources in
<arch>/ are enabled.
